/*
 * Trabalho APS
 */
package apscliente;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;
import Mensagem.Mensagem;

/**
 *
 * @author TW
 */
public class Chat extends javax.swing.JFrame {

    /**
     * Creates new form Chat
     */
    private ObjectOutputStream saida;
    private ObjectInputStream entrada;
    private String usuario;
    private javax.swing.JFrame telaAnterior;
    private ListenerChat ouv;
    private String ipServer;
    private Socket con;
    private int cargo;
    private TelaAdmin telaAdmin;

    public Chat() {
        initComponents();
    }

    public int getCargo() {
        return cargo;
    }

    public void setCargo(int cargo) {
        this.cargo = cargo;
    }

    public Socket getCon() {
        return con;
    }

    public void setCon(Socket con) {
        this.con = con;
    }

    public void startListen(ObjectInputStream entrada) {
        telaAdmin = new TelaAdmin();
        this.entrada = entrada;
        telaAdmin.setCon(con);
        telaAdmin.setEntrada(entrada);
        telaAdmin.setSaida(saida);
        telaAdmin.setChat(this);
        //System.out.println(cargo);
        if (cargo < 1) {
            privadoButton.setEnabled(false);
        }
        if (cargo < 2) {
            Admin.setEnabled(false);
        }
        ouv = new ListenerChat(entrada, con);
        ouv.start();

        if (JOptionPane.showConfirmDialog(this, "Deseja carregar as mensagens anteriores") == 0) {
            try {
                this.saida.writeObject(new Mensagem("CarregarMensagensAnteriores"));
            } catch (IOException ex) {
                Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    public void setIpServer(String ip) {
        this.ipServer = ip;
    }

    public void setTelaAnterior(javax.swing.JFrame telaAnterior) {
        this.telaAnterior = telaAnterior;
    }

    public void setSaida(ObjectOutputStream saida) {
        this.saida = saida;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        txtUsuario = new javax.swing.JTextField();
        enviar = new javax.swing.JButton();
        privadoButton = new javax.swing.JButton();
        Admin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ambiente de Comunicação");
        setBackground(new java.awt.Color(0, 0, 153));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        chat.setEditable(false);
        DefaultCaret caret = (DefaultCaret)chat.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        chat.setColumns(20);
        chat.setRows(5);
        jScrollPane1.setViewportView(chat);

        txtUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyPressed(evt);
            }
        });

        enviar.setText("Enviar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        privadoButton.setText("Privado");
        privadoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privadoButtonActionPerformed(evt);
            }
        });

        Admin.setText("Admin");
        Admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(privadoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(Admin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(privadoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Admin)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        enviarMsg(0);
    }//GEN-LAST:event_enviarActionPerformed
    private void enviarMsg(int privado) {
        String msg = txtUsuario.getText();
        if (!msg.equals("")) {
            try {
                Mensagem m = new Mensagem("NovaMensagem", msg);
                m.setPrivado(privado);
                saida.writeObject(m);
                txtUsuario.setText("");
            } catch (IOException ex) {
                Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            saida.writeObject(new Mensagem("SairDoServidor"));
            entrada.close();
            ouv.setStatus(false);
            saida.close();
        } catch (IOException ex) {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            ouv.interrupt();
            telaAnterior.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    //EQUIVALENTE AO setTimeOut do Javascript em Java - Créditos : https://gist.github.com/Shilo/207c7ba4a604b7811b77ff17be8580f3
    public static void setTimeout(Runnable runnable, int delay) {
        new Thread(() -> {
            try {
                Thread.sleep(delay);
                runnable.run();
            } catch (Exception e) {
                System.err.println(e);
            }
        }).start();
    }
    private void privadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privadoButtonActionPerformed
        enviarMsg(1);
    }//GEN-LAST:event_privadoButtonActionPerformed

    private void txtUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            enviarMsg(0);
        }
    }//GEN-LAST:event_txtUsuarioKeyPressed

    private void AdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdminActionPerformed
       telaAdmin.setVisible(true);
    }//GEN-LAST:event_AdminActionPerformed
    public void mostrarMsg(String msg){
        JOptionPane.showMessageDialog(telaAdmin, msg);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Admin;
    private javax.swing.JTextArea chat;
    private javax.swing.JButton enviar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JButton privadoButton;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    public class ListenerChat extends Thread {

        private ObjectInputStream entrada;
        private Socket con;
        private boolean status = true;

        public ListenerChat(ObjectInputStream entrada, Socket con) {
            this.entrada = entrada;
            this.con = con;
        }

        private void setStatus(boolean status) {
            this.status = status;
        }

        public void run() {
            Mensagem msg;
            try {
                while (status) {
                    if (con.getInputStream().available() > 0) {
                        msg = (Mensagem) entrada.readObject();
                        //System.out.println(msg.getTipo());
                        if (msg.getTipo().equals("NovaMensagem") || msg.getTipo().equals("MsgsAnteriores")) {
                            chat.append(msg.getMsg() + "\r\n");
                        } else if (msg.getTipo().equals("Sucesso") || msg.getTipo().equals("Erro")) {
                            if (msg.getTipo().equals("Erro")) {
                                mostrarMsg(msg.getMsg());
                                telaAdmin.setHistorico("");
                                telaAdmin.setCargos(0);
                                telaAdmin.setAchouUsuario(false);
                                telaAdmin.setUsuarioEncontrado("");
                                //break;
                            } else {
                                telaAdmin.setCargos(msg.getCargo());
                                telaAdmin.setHistorico(msg.getMsg());
                                telaAdmin.setAchouUsuario(true);
                                telaAdmin.setUsuarioEncontrado(msg.getNomeUsuario());
                                mostrarMsg("Usuario " + msg.getNomeUsuario() + " encontrado!");
                                //break;
                            }
                        } else if(msg.getTipo().equals("retornoAlteraCargo")){
                            mostrarMsg(msg.getMsg());
                        }
                    }
                }
                //entrada.close();
            } catch (IOException ex) {
                //System.out.println("Servidor caiu");
                //JOptionPane.showMessageDialog(null, "Servidor foi desconectado");
                //System.exit(0);

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
